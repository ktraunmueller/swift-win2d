// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

public enum __IMPL_Microsoft_Graphics_Canvas_UI_Xaml {
    public enum ICanvasAnimatedControlBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl
        public typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControl
        public typealias SwiftProjection = AnyICanvasAnimatedControl
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ICanvasAnimatedControlImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICanvasAnimatedControlImpl: ICanvasAnimatedControl, WinRTAbiImpl {
        fileprivate typealias Bridge = ICanvasAnimatedControlBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.invalidate)
        fileprivate func invalidate() throws {
            try _default.InvalidateImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.resetelapsedtime)
        fileprivate func resetElapsedTime() throws {
            try _default.ResetElapsedTimeImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.createcoreindependentinputsource)
        fileprivate func createCoreIndependentInputSource(_ deviceTypes: WinAppSDK.InputPointerSourceDeviceKinds) throws -> WinAppSDK.InputPointerSource! {
            try _default.CreateCoreIndependentInputSourceImpl(deviceTypes)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.removefromvisualtree)
        fileprivate func removeFromVisualTree() throws {
            try _default.RemoveFromVisualTreeImpl()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.runongameloopthreadasync)
        fileprivate func runOnGameLoopThreadAsync(_ agileCallback: WinAppSDK.DispatcherQueueHandler!) throws -> WindowsFoundation.AnyIAsyncAction! {
            try _default.RunOnGameLoopThreadAsyncImpl(agileCallback)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.clearcolor)
        fileprivate var clearColor : UWP.Color {
            get { try! _default.get_ClearColorImpl() }
            set { try! _default.put_ClearColorImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.customdevice)
        fileprivate var customDevice : Win2D.CanvasDevice! {
            get { try! _default.get_CustomDeviceImpl() }
            set { try! _default.put_CustomDeviceImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.dpiscale)
        fileprivate var dpiScale : Float {
            get { try! _default.get_DpiScaleImpl() }
            set { try! _default.put_DpiScaleImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.forcesoftwarerenderer)
        fileprivate var forceSoftwareRenderer : Bool {
            get { try! _default.get_ForceSoftwareRendererImpl() }
            set { try! _default.put_ForceSoftwareRendererImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.hasgameloopthreadaccess)
        fileprivate var hasGameLoopThreadAccess : Bool {
            get { try! _default.get_HasGameLoopThreadAccessImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.isfixedtimestep)
        fileprivate var isFixedTimeStep : Bool {
            get { try! _default.get_IsFixedTimeStepImpl() }
            set { try! _default.put_IsFixedTimeStepImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.paused)
        fileprivate var paused : Bool {
            get { try! _default.get_PausedImpl() }
            set { try! _default.put_PausedImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.readytodraw)
        fileprivate var readyToDraw : Bool {
            get { try! _default.get_ReadyToDrawImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.size)
        fileprivate var size : WindowsFoundation.Size {
            get { try! _default.get_SizeImpl() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.targetelapsedtime)
        fileprivate var targetElapsedTime : WindowsFoundation.TimeSpan {
            get { try! _default.get_TargetElapsedTimeImpl() }
            set { try! _default.put_TargetElapsedTimeImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.useshareddevice)
        fileprivate var useSharedDevice : Bool {
            get { try! _default.get_UseSharedDeviceImpl() }
            set { try! _default.put_UseSharedDeviceImpl(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.createresources)
        fileprivate lazy var createResources : Event<TypedEventHandler<CanvasAnimatedControl?, CanvasCreateResourcesEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_CreateResourcesImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_CreateResourcesImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.draw)
        fileprivate lazy var draw : Event<TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedDrawEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_DrawImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_DrawImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.gameloopstarting)
        fileprivate lazy var gameLoopStarting : Event<TypedEventHandler<ICanvasAnimatedControl?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_GameLoopStartingImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_GameLoopStartingImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.gameloopstopped)
        fileprivate lazy var gameLoopStopped : Event<TypedEventHandler<ICanvasAnimatedControl?, Any?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_GameLoopStoppedImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_GameLoopStoppedImpl($0)
           }
          )
        }()

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.update)
        fileprivate lazy var update : Event<TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedUpdateEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_UpdateImpl($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_UpdateImpl($0)
           }
          )
        }()

        private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.device)
        fileprivate var device : Win2D.CanvasDevice! {
            get { try! _ICanvasResourceCreator.get_DeviceImpl() }
        }

        private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.convertpixelstodips)
        fileprivate func convertPixelsToDips(_ pixels: Int32) throws -> Float {
            try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDipsImpl(pixels)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.convertdipstopixels)
        fileprivate func convertDipsToPixels(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32 {
            try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixelsImpl(dips, dpiRounding)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.dpi)
        fileprivate var dpi : Float {
            get { try! _ICanvasResourceCreatorWithDpi.get_DpiImpl() }
        }

    }

}
