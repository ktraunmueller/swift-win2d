// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinUI
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol)
public final class CanvasAnimatedControl : WinUI.UserControl, Win2D.ICanvasResourceCreator, Win2D.ICanvasResourceCreatorWithDpi, ICanvasAnimatedControl {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControl
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl>?) -> CanvasAnimatedControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl")))
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_DeviceImpl() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDipsImpl(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixelsImpl(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_DpiImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.invalidate)
    public func invalidate() throws {
        try _default.InvalidateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.resetelapsedtime)
    public func resetElapsedTime() throws {
        try _default.ResetElapsedTimeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.createcoreindependentinputsource)
    public func createCoreIndependentInputSource(_ deviceTypes: WinAppSDK.InputPointerSourceDeviceKinds) throws -> WinAppSDK.InputPointerSource! {
        try _default.CreateCoreIndependentInputSourceImpl(deviceTypes)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.removefromvisualtree)
    public func removeFromVisualTree() throws {
        try _default.RemoveFromVisualTreeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.runongameloopthreadasync)
    public func runOnGameLoopThreadAsync(_ agileCallback: WinAppSDK.DispatcherQueueHandler!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RunOnGameLoopThreadAsyncImpl(agileCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.clearcolor)
    public var clearColor : UWP.Color {
        get { try! _default.get_ClearColorImpl() }
        set { try! _default.put_ClearColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.customdevice)
    public var customDevice : Win2D.CanvasDevice! {
        get { try! _default.get_CustomDeviceImpl() }
        set { try! _default.put_CustomDeviceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.dpiscale)
    public var dpiScale : Float {
        get { try! _default.get_DpiScaleImpl() }
        set { try! _default.put_DpiScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.forcesoftwarerenderer)
    public var forceSoftwareRenderer : Bool {
        get { try! _default.get_ForceSoftwareRendererImpl() }
        set { try! _default.put_ForceSoftwareRendererImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.hasgameloopthreadaccess)
    public var hasGameLoopThreadAccess : Bool {
        get { try! _default.get_HasGameLoopThreadAccessImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.isfixedtimestep)
    public var isFixedTimeStep : Bool {
        get { try! _default.get_IsFixedTimeStepImpl() }
        set { try! _default.put_IsFixedTimeStepImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.paused)
    public var paused : Bool {
        get { try! _default.get_PausedImpl() }
        set { try! _default.put_PausedImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.readytodraw)
    public var readyToDraw : Bool {
        get { try! _default.get_ReadyToDrawImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_SizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.targetelapsedtime)
    public var targetElapsedTime : WindowsFoundation.TimeSpan {
        get { try! _default.get_TargetElapsedTimeImpl() }
        set { try! _default.put_TargetElapsedTimeImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.useshareddevice)
    public var useSharedDevice : Bool {
        get { try! _default.get_UseSharedDeviceImpl() }
        set { try! _default.put_UseSharedDeviceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.createresources)
    public lazy var createResources : Event<TypedEventHandler<CanvasAnimatedControl?, CanvasCreateResourcesEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CreateResourcesImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CreateResourcesImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.draw)
    public lazy var draw : Event<TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedDrawEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DrawImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DrawImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.gameloopstarting)
    public lazy var gameLoopStarting : Event<TypedEventHandler<ICanvasAnimatedControl?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GameLoopStartingImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GameLoopStartingImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.gameloopstopped)
    public lazy var gameLoopStopped : Event<TypedEventHandler<ICanvasAnimatedControl?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_GameLoopStoppedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_GameLoopStoppedImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedcontrol.update)
    public lazy var update : Event<TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedUpdateEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_UpdateImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_UpdateImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = CanvasAnimatedControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl
            internal typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimateddraweventargs)
public final class CanvasAnimatedDrawEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedDrawEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs>?) -> CanvasAnimatedDrawEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICanvasAnimatedDrawEventArgsFactory: __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedDrawEventArgsFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs"))
    public init(_ canvasDrawingSession: Win2D.CanvasDrawingSession!, _ timingInformation: Win2D.CanvasTimingInformation) {
        super.init(try! Self._ICanvasAnimatedDrawEventArgsFactory.CreateImpl(canvasDrawingSession, timingInformation))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimateddraweventargs.drawingsession)
    public var drawingSession : Win2D.CanvasDrawingSession! {
        get { try! _default.get_DrawingSessionImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimateddraweventargs.timing)
    public var timing : Win2D.CanvasTimingInformation {
        get { try! _default.get_TimingImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedupdateeventargs)
public final class CanvasAnimatedUpdateEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedUpdateEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs>?) -> CanvasAnimatedUpdateEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICanvasAnimatedUpdateEventArgsFactory: __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedUpdateEventArgsFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs"))
    public init(_ timingInformation: Win2D.CanvasTimingInformation) {
        super.init(try! Self._ICanvasAnimatedUpdateEventArgsFactory.CreateImpl(timingInformation))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasanimatedupdateeventargs.timing)
    public var timing : Win2D.CanvasTimingInformation {
        get { try! _default.get_TimingImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol)
public final class CanvasControl : WinUI.UserControl, Win2D.ICanvasResourceCreator, Win2D.ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasControl
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl>?) -> CanvasControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl")))
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_DeviceImpl() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDipsImpl(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixelsImpl(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_DpiImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.invalidate)
    public func invalidate() throws {
        try _default.InvalidateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.removefromvisualtree)
    public func removeFromVisualTree() throws {
        try _default.RemoveFromVisualTreeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.clearcolor)
    public var clearColor : UWP.Color {
        get { try! _default.get_ClearColorImpl() }
        set { try! _default.put_ClearColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.customdevice)
    public var customDevice : Win2D.CanvasDevice! {
        get { try! _default.get_CustomDeviceImpl() }
        set { try! _default.put_CustomDeviceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.dpiscale)
    public var dpiScale : Float {
        get { try! _default.get_DpiScaleImpl() }
        set { try! _default.put_DpiScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.forcesoftwarerenderer)
    public var forceSoftwareRenderer : Bool {
        get { try! _default.get_ForceSoftwareRendererImpl() }
        set { try! _default.put_ForceSoftwareRendererImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.readytodraw)
    public var readyToDraw : Bool {
        get { try! _default.get_ReadyToDrawImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_SizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.useshareddevice)
    public var useSharedDevice : Bool {
        get { try! _default.get_UseSharedDeviceImpl() }
        set { try! _default.put_UseSharedDeviceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.createresources)
    public lazy var createResources : Event<TypedEventHandler<CanvasControl?, CanvasCreateResourcesEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CreateResourcesImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CreateResourcesImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvascontrol.draw)
    public lazy var draw : Event<TypedEventHandler<CanvasControl?, CanvasDrawEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DrawImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DrawImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = CanvasControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl
            internal typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasdraweventargs)
public final class CanvasDrawEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasDrawEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs>?) -> CanvasDrawEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICanvasDrawEventArgsFactory: __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasDrawEventArgsFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs"))
    public init(_ canvasDrawingSession: Win2D.CanvasDrawingSession!) {
        super.init(try! Self._ICanvasDrawEventArgsFactory.CreateImpl(canvasDrawingSession))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasdraweventargs.drawingsession)
    public var drawingSession : Win2D.CanvasDrawingSession! {
        get { try! _default.get_DrawingSessionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource)
public final class CanvasImageSource : WinUI.SurfaceImageSource, Win2D.ICanvasResourceCreator, Win2D.ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasImageSource
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>?) -> CanvasImageSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasImageSourceFactory: __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasImageSourceFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource"))
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ size: WindowsFoundation.Size) {
        super.init(fromAbi: try! Self._ICanvasImageSourceFactory.CreateWithSizeImpl(resourceCreator, size))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ width: Float, _ height: Float) {
        super.init(fromAbi: try! Self._ICanvasImageSourceFactory.CreateWithWidthAndHeightImpl(resourceCreator, width, height))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float) {
        super.init(fromAbi: try! Self._ICanvasImageSourceFactory.CreateWithWidthAndHeightAndDpiImpl(resourceCreator, width, height, dpi))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float, _ alphaMode: Win2D.CanvasAlphaMode) {
        super.init(fromAbi: try! Self._ICanvasImageSourceFactory.CreateWithWidthAndHeightAndDpiAndAlphaModeImpl(resourceCreator, width, height, dpi, alphaMode))
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_DeviceImpl() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDipsImpl(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixelsImpl(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_DpiImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.createdrawingsession)
    public func createDrawingSession(_ clearColor: UWP.Color) throws -> Win2D.CanvasDrawingSession! {
        try _default.CreateDrawingSessionImpl(clearColor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.createdrawingsession)
    public func createDrawingSession(_ clearColor: UWP.Color, _ updateRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasDrawingSession! {
        try _default.CreateDrawingSessionWithUpdateRectangleImpl(clearColor, updateRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.recreate)
    public func recreate(_ value: Win2D.AnyICanvasResourceCreator!) throws {
        try _default.RecreateImpl(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_SizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasimagesource.sizeinpixels)
    public var sizeInPixels : UWP.BitmapSize {
        get { try! _default.get_SizeInPixelsImpl() }
    }

    deinit {
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasregionsinvalidatedeventargs)
public final class CanvasRegionsInvalidatedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasRegionsInvalidatedEventArgs
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs>?) -> CanvasRegionsInvalidatedEventArgs? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasregionsinvalidatedeventargs.visibleregion)
    public var visibleRegion : WindowsFoundation.Rect {
        get { try! _default.get_VisibleRegionImpl() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasswapchainpanel)
public final class CanvasSwapChainPanel : WinUI.SwapChainPanel {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasSwapChainPanel
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel>?) -> CanvasSwapChainPanel? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel")))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasswapchainpanel.removefromvisualtree)
    public func removeFromVisualTree() throws {
        try _default.RemoveFromVisualTreeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasswapchainpanel.swapchain)
    public var swapChain : Win2D.CanvasSwapChain! {
        get { try! _default.get_SwapChainImpl() }
        set { try! _default.put_SwapChainImpl(newValue) }
    }

    internal enum IFrameworkElementOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml.IFrameworkElementOverrides
        internal typealias Class = CanvasSwapChainPanel
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel
            internal typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasSwapChainPanel
        }
    }
    internal typealias Composable = IFrameworkElementOverrides
    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol)
public final class CanvasVirtualControl : WinUI.UserControl, Win2D.ICanvasResourceCreator, Win2D.ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasVirtualControl
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl>?) -> CanvasVirtualControl? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    override public init() {
        super.init(fromAbi: try! RoActivateInstance(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl")))
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_DeviceImpl() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDipsImpl(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixelsImpl(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_DpiImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.createdrawingsession)
    public func createDrawingSession(_ updateRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasDrawingSession! {
        try _default.CreateDrawingSessionImpl(updateRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.suspenddrawingsession)
    public func suspendDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession!) throws {
        try _default.SuspendDrawingSessionImpl(drawingSession)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.resumedrawingsession)
    public func resumeDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession!) throws {
        try _default.ResumeDrawingSessionImpl(drawingSession)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.invalidate)
    public func invalidate() throws {
        try _default.InvalidateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.invalidate)
    public func invalidate(_ region: WindowsFoundation.Rect) throws {
        try _default.InvalidateRegionImpl(region)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.removefromvisualtree)
    public func removeFromVisualTree() throws {
        try _default.RemoveFromVisualTreeImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.clearcolor)
    public var clearColor : UWP.Color {
        get { try! _default.get_ClearColorImpl() }
        set { try! _default.put_ClearColorImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.customdevice)
    public var customDevice : Win2D.CanvasDevice! {
        get { try! _default.get_CustomDeviceImpl() }
        set { try! _default.put_CustomDeviceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.dpiscale)
    public var dpiScale : Float {
        get { try! _default.get_DpiScaleImpl() }
        set { try! _default.put_DpiScaleImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.forcesoftwarerenderer)
    public var forceSoftwareRenderer : Bool {
        get { try! _default.get_ForceSoftwareRendererImpl() }
        set { try! _default.put_ForceSoftwareRendererImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.readytodraw)
    public var readyToDraw : Bool {
        get { try! _default.get_ReadyToDrawImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_SizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.useshareddevice)
    public var useSharedDevice : Bool {
        get { try! _default.get_UseSharedDeviceImpl() }
        set { try! _default.put_UseSharedDeviceImpl(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.createresources)
    public lazy var createResources : Event<TypedEventHandler<CanvasVirtualControl?, CanvasCreateResourcesEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CreateResourcesImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CreateResourcesImpl($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualcontrol.regionsinvalidated)
    public lazy var regionsInvalidated : Event<TypedEventHandler<CanvasVirtualControl?, CanvasRegionsInvalidatedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RegionsInvalidatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RegionsInvalidatedImpl($0)
       }
      )
    }()

    internal enum IControlOverrides : ComposableImpl {
        internal typealias CABI = __x_ABI_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        internal typealias SwiftABI = __ABI_Microsoft_UI_Xaml_Controls.IControlOverrides
        internal typealias Class = CanvasVirtualControl
        internal typealias SwiftProjection = WinRTClassWeakReference<Class>
        internal enum Default : AbiInterface {
            internal typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl
            internal typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasVirtualControl
        }
    }
    internal typealias Composable = IControlOverrides
    deinit {
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource)
public final class CanvasVirtualImageSource : WinRTClass, Win2D.ICanvasResourceCreator, Win2D.ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasVirtualImageSource
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>?) -> CanvasVirtualImageSource? {
        guard let abi = abi else { return nil }
        return .init(fromAbi: WindowsFoundation.IInspectable(abi))
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasVirtualImageSourceFactory: __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasVirtualImageSourceFactory = try! RoGetActivationFactory(HString("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource"))
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ size: WindowsFoundation.Size) {
        super.init(try! Self._ICanvasVirtualImageSourceFactory.CreateWithSizeImpl(resourceCreator, size))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ width: Float, _ height: Float) {
        super.init(try! Self._ICanvasVirtualImageSourceFactory.CreateWithWidthAndHeightImpl(resourceCreator, width, height))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float) {
        super.init(try! Self._ICanvasVirtualImageSourceFactory.CreateWithWidthAndHeightAndDpiImpl(resourceCreator, width, height, dpi))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float, _ alphaMode: Win2D.CanvasAlphaMode) {
        super.init(try! Self._ICanvasVirtualImageSourceFactory.CreateWithWidthAndHeightAndDpiAndAlphaModeImpl(resourceCreator, width, height, dpi, alphaMode))
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_DeviceImpl() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDipsImpl(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixelsImpl(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_DpiImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.createdrawingsession)
    public func createDrawingSession(_ clearColor: UWP.Color, _ updateRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasDrawingSession! {
        try _default.CreateDrawingSessionImpl(clearColor, updateRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.suspenddrawingsession)
    public func suspendDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession!) throws {
        try _default.SuspendDrawingSessionImpl(drawingSession)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.resumedrawingsession)
    public func resumeDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession!) throws {
        try _default.ResumeDrawingSessionImpl(drawingSession)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.invalidate)
    public func invalidate() throws {
        try _default.InvalidateImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.invalidate)
    public func invalidate(_ region: WindowsFoundation.Rect) throws {
        try _default.InvalidateRegionImpl(region)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.raiseregionsinvalidatedifany)
    public func raiseRegionsInvalidatedIfAny() throws {
        try _default.RaiseRegionsInvalidatedIfAnyImpl()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.resize)
    public func resize(_ size: WindowsFoundation.Size) throws {
        try _default.ResizeWithSizeImpl(size)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.resize)
    public func resize(_ width: Float, _ height: Float) throws {
        try _default.ResizeWithWidthAndHeightImpl(width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.resize)
    public func resize(_ width: Float, _ height: Float, _ dpi: Float) throws {
        try _default.ResizeWithWidthAndHeightAndDpiImpl(width, height, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.recreate)
    public func recreate(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws {
        try _default.RecreateImpl(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaModeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_SizeImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.sizeinpixels)
    public var sizeInPixels : UWP.BitmapSize {
        get { try! _default.get_SizeInPixelsImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.source)
    public var source : WinUI.VirtualSurfaceImageSource! {
        get { try! _default.get_SourceImpl() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.canvasvirtualimagesource.regionsinvalidated)
    public lazy var regionsInvalidated : Event<TypedEventHandler<CanvasVirtualImageSource?, CanvasRegionsInvalidatedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_RegionsInvalidatedImpl($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_RegionsInvalidatedImpl($0)
       }
      )
    }()

    deinit {
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol)
public protocol ICanvasAnimatedControl : Win2D.ICanvasResourceCreator, Win2D.ICanvasResourceCreatorWithDpi {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.invalidate)
    func invalidate() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.resetelapsedtime)
    func resetElapsedTime() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.createcoreindependentinputsource)
    func createCoreIndependentInputSource(_ deviceTypes: WinAppSDK.InputPointerSourceDeviceKinds) throws -> WinAppSDK.InputPointerSource!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.removefromvisualtree)
    func removeFromVisualTree() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.runongameloopthreadasync)
    func runOnGameLoopThreadAsync(_ agileCallback: WinAppSDK.DispatcherQueueHandler!) throws -> WindowsFoundation.AnyIAsyncAction!
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.clearcolor)
    var clearColor: UWP.Color { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.customdevice)
    var customDevice: Win2D.CanvasDevice! { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.dpiscale)
    var dpiScale: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.forcesoftwarerenderer)
    var forceSoftwareRenderer: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.hasgameloopthreadaccess)
    var hasGameLoopThreadAccess: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.isfixedtimestep)
    var isFixedTimeStep: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.paused)
    var paused: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.readytodraw)
    var readyToDraw: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.size)
    var size: WindowsFoundation.Size { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.targetelapsedtime)
    var targetElapsedTime: WindowsFoundation.TimeSpan { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.useshareddevice)
    var useSharedDevice: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.createresources)
    var createResources: Event<TypedEventHandler<CanvasAnimatedControl?, CanvasCreateResourcesEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.draw)
    var draw: Event<TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedDrawEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.gameloopstarting)
    var gameLoopStarting: Event<TypedEventHandler<ICanvasAnimatedControl?, Any?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.gameloopstopped)
    var gameLoopStopped: Event<TypedEventHandler<ICanvasAnimatedControl?, Any?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.ui.xaml.icanvasanimatedcontrol.update)
    var update: Event<TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedUpdateEventArgs?>> { get }
}

extension ICanvasAnimatedControl {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasAnimatedControl = any ICanvasAnimatedControl

